---
- hosts: localhost
  vars_prompt:
    - name: kubernetes_version
      prompt: kubernetes version
      default: "v1.3.4"
      private: no
    - name: pki_dir
      prompt: pki reletive directory
      private: no
    - name: kube_api_server
      prompt: target kubernetes api server
      private: no
      default: "https://192.168.80.141:443"
    - name: storage_host
      prompt: storage host
      private: no
  vars:
    pv:
      - name: cassandra0
        size: 10Gi
        path: /data/pv/cassandra0
      - name: cassandra1
        size: 10Gi
        path: /data/pv/cassandra1
      - name: cassandra2
        size: 10Gi
        path: /data/pv/cassandra2
      - name: registry
        size: 100Gi
        path: /data/pv/registry
  tasks:
    - file: >
        path="/etc/kubernetes/ssl/{{ pki_dir }}"
        state=directory
        owner="{{ ansible_user }}"
        mode=0750
      become: yes

    - local_action: stat
      args:
        path: "{{ downloads_dir }}/easy-rsa/{{ pki_dir }}/ca.crt"
      register: ca
      run_once: true
      name: get ca.crt stat

    - local_action: "shell ./easyrsa build-client-full node-{{ ansible_hostname }} nopass"
      args:
        chdir: "{{ downloads_dir }}/easy-rsa/easy-rsa-master/easyrsa3"
        creates: "{{ downloads_dir }}/easy-rsa/{{ pki_dir }}/private/node-{{ ansible_hostname }}.key"
      environment:
        EASYRSA_PKI: "{{ downloads_dir }}/easy-rsa/{{ pki_dir }}"
        EASYRSA: "{{ downloads_dir }}/easy-rsa/easy-rsa-master/easyrsa3"
      when: ca.stat.exists
      name: generate client certificate authentication

    - copy: >
        src="{{ downloads_dir }}/easy-rsa/{{ pki_dir }}/ca.crt"
        dest="/etc/kubernetes/ssl/{{ pki_dir }}/ca.crt"
        owner="{{ ansible_user }}"
        mode=0750
      name: copy ca.crt
      become: yes

    - copy: >
        src="{{ downloads_dir }}/easy-rsa/{{ pki_dir }}/issued/node-{{ ansible_hostname }}.crt"
        dest="/etc/kubernetes/ssl/{{ pki_dir }}/kubecfg.crt"
        mode=0750
        owner="{{ ansible_user }}"
      name: "copy kubecfg.crt"
      become: yes

    - copy: >
        src="{{ downloads_dir }}/easy-rsa/{{ pki_dir }}/private/node-{{ ansible_hostname }}.key"
        dest="/etc/kubernetes/ssl/{{ pki_dir }}/kubecfg.key"
        mode=0750
        owner="{{ ansible_user }}"
      name: copy kubecfg.key
      become: yes

    - file: >
        src="{{ downloads_dir }}/kubernetes-{{ kubernetes_version }}/kubernetes/platforms/linux/amd64/kubectl"
        path=/usr/local/bin/kubectl
        state=link
        mode=0750
      become: yes

    - command: >
        kubectl config set-credentials 
        {{ pki_dir }}-admin 
        --client-key=/etc/kubernetes/ssl/{{ pki_dir }}/kubecfg.key 
        --client-certificate=/etc/kubernetes/ssl/{{ pki_dir }}/kubecfg.crt
      name: kubectl config set-credentials

    - command: >
        kubectl config set-cluster {{ pki_dir }}-cluster
        --certificate-authority=/etc/kubernetes/ssl/{{ pki_dir }}/ca.crt 
        --server={{ kube_api_server }}
      name: kubectl config set-cluster

    - command: >
        kubectl config set-context {{ pki_dir }}-context 
        --user={{ pki_dir }}-admin 
        --cluster={{ pki_dir }}-cluster
      name: kubectl config set-context

    - command: >
        kubectl config use-context {{ pki_dir }}-context
      name: Sets the current-context in a kubeconfig file

    - file: path={{ item.path }} state=directory
      with_items: "{{ pv }}"
      delegate_to: "{{ storage_host }}"
      name: mkdir hostPath
      tags:
        - storage

    - template: >
        src=hostPath-pv.yml.j2
        dest="/tmp/hostPath-pv-{{ item.name }}.yml"
      with_items: "{{ pv }}"
      tags:
        - storage

    - command: >
        kubectl apply -f /tmp/hostPath-pv-{{ item.name }}.yml
      with_items: "{{ pv }}"
      name: kubectl apply pv
      tags:
        - storage


- hosts: nodes
  become: yes
  tasks:
    - copy: src=kube-registry-proxy.yml dest=/etc/kubernetes/manifests/kube-registry-proxy.yml
      name: copy registry proxy to manifests

- hosts: localhost
  vars_files:
    - vars_files/kube.yml
  vars:
    registry_pvc_storage: 100Gi
  roles:
    - { role: kube-addons }
  tasks:
    - copy: src=cassandra-petset.yml dest=/tmp/cassandra-petset.yml
      register: cassandra_petset

    - command: kubectl apply -f /tmp/cassandra-petset.yml
      when: cassandra_petset.changed





    # - name: gather facts from glusters
    #   setup:
    #   delegate_to: "{{ item }}"
    #   delegate_facts: True
    #   with_items: "{{ groups['glusters'] }}"
    #   tags:
    #     - storage

    # - template: "src={{ item }}.j2 dest=/tmp/{{ item }}"
    #   with_items:
    #     - glusterfs-cluster-svc.yml
    #     - glusterfs-cluster-ep.yml
    #   tags:
    #     - storage

    # - shell: "/usr/local/bin/kubectl apply -f /tmp/{{ item }}"
    #   with_items:
    #     - glusterfs-cluster-svc.yml
    #     - glusterfs-cluster-ep.yml
    #   tags:
    #     - storage
    #   name: estabish glusterfs-cluster endpoint & service

    # - template: >
    #    src=glusterfs-cluster-pv.yml.j2
    #    dest="/tmp/glusterfs-cluster-pv-{{ item.name }}.yml"
    #   with_items: "{{ glusterfs_pvs }}"
    #   tags:
    #     - storage

    # - command: "kubectl apply -f /tmp/glusterfs-cluster-pv-{{ item.name }}.yml"
    #   with_items: "{{ glusterfs_pvs }}"
    #   tags:
    #     - storage

    # - copy: src=cassandra-petset.yml dest=/tmp/cassandra-petset.yml
    #   tags:
    #     - cassandra




